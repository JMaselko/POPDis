Pop1=Pop[,rep(1,10),]
#dim(Pop1)=c(dim(Pop)[1],1,dim(Pop)[3])
cor.test(Fst.mat(Pop), Fst.mat(Pop1))
plot(Fst.mat(Pop), Fst.mat(Pop1))
for (t in 1:YearSteps){
# Randomly choose dispersion parameters simulating panmixia:
if (Dispersal=="Random"){Dispersion=Dispers.Rand(Pops=PopLoc)}
# Step 1:
# create allele frequencies for each spawning group at each location:
x<-matrix(data=NA, nrow=PopLoc, ncol=loci)
Ndisp<-matrix(data=0, nrow=PopLoc, ncol=PopLoc)
# Cohort specific selection
if (Selection==TRUE){
if (selrand==TRUE){
s<-runif(loci,-selstr,selstr) # when loci experience independent selection (up to selstr) and direction
} else if (selrand==FALSE){
s<-rep(runif(1,-selstr,selstr), loci)} # when all loci experience equal selection strength (up to selstr) and direction
}
for (k in 1:PopLoc){
# Create spawning aggregates from each spawning cohort
a_r<-0
lR<-length(MinAge:MaxAge)# Number of spawning cohorts
for (r in MinAge:MaxAge){
# Draw a sample of alelles from each spawner age group and combine:
if (anyNA(Pop[k,r,])==TRUE){ # Note this is a failure in cohort recruitment to spawning population
lR=lR-1
} else {
if (Stoch==TRUE){
a_r <- a_r+rbinom(loci,2*N,prob=Pop[k,r,])  # stochastic number of alleles from each cohort
} else { a_r <- a_r+round(2*N*Pop[k,r,]) }  # deterministic number of alleles from each cohort
}
}
a_r<-a_r/(2*N*lR) # These are the allele frequencies in cohort aggregated spawner group
# Now the aggregate cohort Spawners of each population create babies:
if (Mutation == TRUE) {
a_r<- a_r*(1-mut)+(1-a_r)*mut # with mutation (p(major allele not mutating)+p(minor allele mutating))
}     # No mutation
# The a_r are the allele frequencies in the larvae that are then subject to selection
# during their simulated pelagic larval stage:
if (Selection==TRUE) {
a_r<-((1+s)*a_r)/((1+s)*a_r+(1-s)*(1-a_r))
}
# These are the larval allele frequencies from each source spawning location
# where rows are populations and columns are loci:
x[k,]<-a_r
# creating dispersal matrix
if (Stoch==TRUE){
if (sum(Dispersion[k,])==0){
Ndisp[k,]=0
} else {
Ndisp[k,]<-rmultinom(1,N,Dispersion[k,])
}
}
}
# Below I create age 0 cohort that is joining the destination population based
# on the Dispersion matrix:
x_0<-matrix(data=0, nrow=PopLoc, ncol=loci)
if (Stoch==FALSE){
Ndisp=as.matrix(round(Dispersion*N))
}
x_0<-t(Ndisp/colSums(Ndisp)[col(Ndisp)])%*%x
if (anyNA(colSums(x_0))){
x_0[,which(is.na(colSums(x_0)))]<-x[,which(is.na(colSums(x_0)))] # this is when failure of any migrants
}
# Drop last cohort, and update each cohort by 1 and add year 1 from x_0
if (MaxAge==1){
Pop[,1,]<-x_0
} else {
for (c in MaxAge:2){
Pop[,c,]=Pop[,(c-1),]
}
Pop[,1,]<-x_0
}
}
Pop1=Pop[,rep(1,10),]
#dim(Pop1)=c(dim(Pop)[1],1,dim(Pop)[3])
cor.test(Fst.mat(Pop), Fst.mat(Pop1))
plot(Fst.mat(Pop), Fst.mat(Pop1))
for (t in 1:YearSteps){
# Randomly choose dispersion parameters simulating panmixia:
if (Dispersal=="Random"){Dispersion=Dispers.Rand(Pops=PopLoc)}
# Step 1:
# create allele frequencies for each spawning group at each location:
x<-matrix(data=NA, nrow=PopLoc, ncol=loci)
Ndisp<-matrix(data=0, nrow=PopLoc, ncol=PopLoc)
# Cohort specific selection
if (Selection==TRUE){
if (selrand==TRUE){
s<-runif(loci,-selstr,selstr) # when loci experience independent selection (up to selstr) and direction
} else if (selrand==FALSE){
s<-rep(runif(1,-selstr,selstr), loci)} # when all loci experience equal selection strength (up to selstr) and direction
}
for (k in 1:PopLoc){
# Create spawning aggregates from each spawning cohort
a_r<-0
lR<-length(MinAge:MaxAge)# Number of spawning cohorts
for (r in MinAge:MaxAge){
# Draw a sample of alelles from each spawner age group and combine:
if (anyNA(Pop[k,r,])==TRUE){ # Note this is a failure in cohort recruitment to spawning population
lR=lR-1
} else {
if (Stoch==TRUE){
a_r <- a_r+rbinom(loci,2*N,prob=Pop[k,r,])  # stochastic number of alleles from each cohort
} else { a_r <- a_r+round(2*N*Pop[k,r,]) }  # deterministic number of alleles from each cohort
}
}
a_r<-a_r/(2*N*lR) # These are the allele frequencies in cohort aggregated spawner group
# Now the aggregate cohort Spawners of each population create babies:
if (Mutation == TRUE) {
a_r<- a_r*(1-mut)+(1-a_r)*mut # with mutation (p(major allele not mutating)+p(minor allele mutating))
}     # No mutation
# The a_r are the allele frequencies in the larvae that are then subject to selection
# during their simulated pelagic larval stage:
if (Selection==TRUE) {
a_r<-((1+s)*a_r)/((1+s)*a_r+(1-s)*(1-a_r))
}
# These are the larval allele frequencies from each source spawning location
# where rows are populations and columns are loci:
x[k,]<-a_r
# creating dispersal matrix
if (Stoch==TRUE){
if (sum(Dispersion[k,])==0){
Ndisp[k,]=0
} else {
Ndisp[k,]<-rmultinom(1,N,Dispersion[k,])
}
}
}
# Below I create age 0 cohort that is joining the destination population based
# on the Dispersion matrix:
x_0<-matrix(data=0, nrow=PopLoc, ncol=loci)
if (Stoch==FALSE){
Ndisp=as.matrix(round(Dispersion*N))
}
x_0<-t(Ndisp/colSums(Ndisp)[col(Ndisp)])%*%x
if (anyNA(colSums(x_0))){
x_0[,which(is.na(colSums(x_0)))]<-x[,which(is.na(colSums(x_0)))] # this is when failure of any migrants
}
# Drop last cohort, and update each cohort by 1 and add year 1 from x_0
if (MaxAge==1){
Pop[,1,]<-x_0
} else {
for (c in MaxAge:2){
Pop[,c,]=Pop[,(c-1),]
}
Pop[,1,]<-x_0
}
}
Pop1=Pop[,rep(1,10),]
#dim(Pop1)=c(dim(Pop)[1],1,dim(Pop)[3])
cor.test(Fst.mat(Pop), Fst.mat(Pop1))
plot(Fst.mat(Pop), Fst.mat(Pop1))
colMeans(na.omit(Pop[i,,])
)
colMeans(na.omit(Pop1[i,,]))
FstMat(Pop1)
Fst.mat(Pop1)
Fst.mat(Pop)
dim(Pop)[1]
=matrix(nrow=PopLoc,ncol=PopLoc)
PopLoc<-dim(Pop)[1]
FstMat=matrix(nrow=PopLoc,ncol=PopLoc)
length(Pop[1,,1])
colMeans(na.omit(Pop[i,,]))
na.omit(Pop[i,,])
colMeans(na.omit(Pop[i,,]))
colMeans(na.omit(Pop[j,,]))
(na.omit(Pop[j,,])
)
i
j
na.omit(Pop[i,,]))
(na.omit(Pop[i,,]))
(na.omit(Pop[j,,]))
(na.omit(Pop[i,1,]))
colMeans(na.omit(Pop[i,,]))
colMeans(na.omit(Pop[j,,]))
colMeans(na.omit(Pop[i,1,]))
stGst(Pop1=colMeans(na.omit(Pop[i,,])),Pop2=colMeans(na.omit(Pop[j,,])))
stGst(Pop1=(na.omit(Pop[i,1,])),Pop2=(na.omit(Pop[j,1,])))
stGst(Pop1=(na.omit(Pop[i,,])),Pop2=(na.omit(Pop[j,,])))
(na.omit(Pop[i,,]))
Fst.mat(Pop)
Fst.mat(Pop1)
Fst.mat<-function(Pop){
PopLoc<-dim(Pop)[1]
FstMat=matrix(nrow=PopLoc,ncol=PopLoc)
for (i in 1:PopLoc){
for (j in 1:PopLoc){
#      if(length(Pop[1,,1])==1){
FstMat[i,j]=stGst(Pop1=(na.omit(Pop[i,,])),Pop2=(na.omit(Pop[j,,])))
#     } else {
#       FstMat[i,j]=stGst(Pop1=colMeans(na.omit(Pop[i,,])),Pop2=colMeans(na.omit(Pop[j,,])))       }
}
}
return(as.dist(FstMat))
}
Fst.mat(Pop)
Fst.mat(Pop1)
Pop1
Pop
for (t in 1:YearSteps){
# Randomly choose dispersion parameters simulating panmixia:
if (Dispersal=="Random"){Dispersion=Dispers.Rand(Pops=PopLoc)}
# Step 1:
# create allele frequencies for each spawning group at each location:
x<-matrix(data=NA, nrow=PopLoc, ncol=loci)
Ndisp<-matrix(data=0, nrow=PopLoc, ncol=PopLoc)
# Cohort specific selection
if (Selection==TRUE){
if (selrand==TRUE){
s<-runif(loci,-selstr,selstr) # when loci experience independent selection (up to selstr) and direction
} else if (selrand==FALSE){
s<-rep(runif(1,-selstr,selstr), loci)} # when all loci experience equal selection strength (up to selstr) and direction
}
for (k in 1:PopLoc){
# Create spawning aggregates from each spawning cohort
a_r<-0
lR<-length(MinAge:MaxAge)# Number of spawning cohorts
for (r in MinAge:MaxAge){
# Draw a sample of alelles from each spawner age group and combine:
if (anyNA(Pop[k,r,])==TRUE){ # Note this is a failure in cohort recruitment to spawning population
lR=lR-1
} else {
if (Stoch==TRUE){
a_r <- a_r+rbinom(loci,2*N,prob=Pop[k,r,])  # stochastic number of alleles from each cohort
} else { a_r <- a_r+round(2*N*Pop[k,r,]) }  # deterministic number of alleles from each cohort
}
}
a_r<-a_r/(2*N*lR) # These are the allele frequencies in cohort aggregated spawner group
# Now the aggregate cohort Spawners of each population create babies:
if (Mutation == TRUE) {
a_r<- a_r*(1-mut)+(1-a_r)*mut # with mutation (p(major allele not mutating)+p(minor allele mutating))
}     # No mutation
# The a_r are the allele frequencies in the larvae that are then subject to selection
# during their simulated pelagic larval stage:
if (Selection==TRUE) {
a_r<-((1+s)*a_r)/((1+s)*a_r+(1-s)*(1-a_r))
}
# These are the larval allele frequencies from each source spawning location
# where rows are populations and columns are loci:
x[k,]<-a_r
# creating dispersal matrix
if (Stoch==TRUE){
if (sum(Dispersion[k,])==0){
Ndisp[k,]=0
} else {
Ndisp[k,]<-rmultinom(1,N,Dispersion[k,])
}
}
}
# Below I create age 0 cohort that is joining the destination population based
# on the Dispersion matrix:
x_0<-matrix(data=0, nrow=PopLoc, ncol=loci)
if (Stoch==FALSE){
Ndisp=as.matrix(round(Dispersion*N))
}
x_0<-t(Ndisp/colSums(Ndisp)[col(Ndisp)])%*%x
if (anyNA(colSums(x_0))){
x_0[,which(is.na(colSums(x_0)))]<-x[,which(is.na(colSums(x_0)))] # this is when failure of any migrants
}
# Drop last cohort, and update each cohort by 1 and add year 1 from x_0
if (MaxAge==1){
Pop[,1,]<-x_0
} else {
for (c in MaxAge:2){
Pop[,c,]=Pop[,(c-1),]
}
Pop[,1,]<-x_0
}
}
Pop1=Pop[,rep(1,10),]
#dim(Pop1)=c(dim(Pop)[1],1,dim(Pop)[3])
cor.test(Fst.mat(Pop), Fst.mat(Pop1))
plot(Fst.mat(Pop), Fst.mat(Pop1))
Fst.mat(Pop)
Fst.mat(Pop1)
1-mean(Pop1^2+Pop2^2)/2
i
j
j=9
Pop1=(na.omit(Pop[i,,]))
Pop2=(na.omit(Pop[j,,]))
1-mean(Pop1^2+Pop2^2)/2
Pop1^2
Pop2^2
mean(1-((Pop1+Pop2)/2)^2)
1-mean(Pop1^2+Pop2^2)/2
Hs<-1-mean(Pop1^2+Pop2^2)/2
Ht<-mean(1-((Pop1+Pop2)/2)^2)
2*(Ht-Hs)/((2*Ht-Hs)*(1-Hs))
library(POPDis)
x=matrix(runif(100), ncol=10)
mean(colmean(x))
mean(colmeans(x))
colMeans(x)
mean(colMeans(x))
mean(x)
x=matrix(runif(1000), ncol=100)
x
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
x=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
stGst(x,y)
stGst=function(Pop1,Pop2){
Hs<-1-mean(Pop1^2+Pop2^2)/2
Ht<-mean(1-((Pop1+Pop2)/2)^2)
#G"st formulation:
sttGst<-2*(Ht-Hs)/((2*Ht-Hs)*(1-Hs))
return(sttGst)
}
stGst(x,y)
stGst(x,y)
x=matrix(runif(1000), ncol=10)
y=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
stGst(x,y)
x=matrix(runif(1000), ncol=10)
y=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
y=colMeans(x)
mean(y)
stGst(x,y)
x1=colMeans(x); y1=colMeans(y)
stGst(x1,y1)
x=matrix(runif(1000), ncol=10)
y=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
stGst(x,y)
x1=colMeans(x); y1=colMeans(y)
stGst(x1,y1)
x=matrix(runif(1000), ncol=10)
y=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
stGst(x,y)
x1=colMeans(x); y1=colMeans(y)
stGst(x1,y1)
x=matrix(runif(1000), ncol=10)
y=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
stGst(x,y)
x1=colMeans(x); y1=colMeans(y)
stGst(x1,y1)
x=matrix(runif(1000), ncol=10)
y=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
stGst(x,y)
x1=colMeans(x); y1=colMeans(y)
stGst(x1,y1)
x=matrix(runif(1000), ncol=10)
y=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
stGst(x,y)
x1=colMeans(x); y1=colMeans(y)
stGst(x1,y1)
x1
y1
x
y
x=matrix(runif(1000), ncol=10)
y=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
x=matrix(runif(1000), ncol=10)
y=matrix(runif(1000), ncol=10)
mean(colMeans(x))
mean(x)
(Pop1^2+Pop2^2)/2
(x^2+y^2)/2
mean(x^2+y^2)/2
x^2
(x^2+y^2)/2
mean(x1^2+y2^2)/2
mean(x1^2+y1^2)/2
mean(x^2+y^2)/2
library(POPDis)
